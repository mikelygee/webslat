#+Title:     Create a VM for WebSLAT Deployment
#+AUTHOR:    Michael Gauland
#+EMAIL:     michael.gauland@canterbury.ac.nz
#+DATE:      {{{time(%Y-%m-%d %H:%M)}}}
#+OPTIONS:   H:6 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \usepackage{pdflscape}
#+LATEX_HEADER: \lstset{frame=shadowbox}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}\bfseries}
#+LATEX_HEADER: \newfontfamily\listingsfont[Scale=.7]{DejaVu Sans Mono}
#+LATEX_HEADER: \lstset{basicstyle=\listingsfont}
#+LATEX_HEADER: \lstset{basicstyle=\small}
#+LATEX_HEADER: \lstset{showspaces=true}
#+LATEX_HEADER: \lstset{columns=fixed}
#+LATEX_HEADER: \lstset{extendedchars=true}
#+LATEX_HEADER: \lstset{frame=shadowbox}
#+LATEX_HEADER: \definecolor{mygray}{gray}{0.8}
#+LATEX_HEADER: \lstset{rulesepcolor=\color{mygray}}
#+LATEX_HEADER: \lstdefinelanguage{bash-local}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{cyan}}
#+LATEX_HEADER: \lstdefinelanguage{bash-remote}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{yellow}}
#+LATEX_HEADER: \lstdefinelanguage{bash-remote-root}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{orange}}
#+LATEX_HEADER: \lstdefinelanguage{fundamental}{basicstyle=\ttfamily\scriptsize,rulesepcolor=\color{cyan},frameround=tttt,backgroundcolor=\color{white},breaklines=true}
#+LATEX_HEADER: \def\lst@visiblespace{\lst@ttfamily{\char32}-}
#+PROPERTY: header-args :eval never

WebSLAT is a web-based interface to the [[http://github.com/mikelygee/SLAT][OpenSLAT]] project. The procedure below
will create a VirtualBox image including the OpenSLAT libraries and WebSLAT
served via Apache.

1. Run ~virtualbox~.
2. Click ~New~, then ~Expert Mode~ (if not already active).
3. Fill out the form:
   - Name :: WebSLAT
   - Type :: Linux
   - Version :: Debian (64-bit)
   - Memory Size :: 1024 MB
   - 'Create a virtual hard disk now'
   Then click ~Create~
4. Specify:
   - File Location :: ~/home/mag109/VirtualBox VMs/WebSLAT/WebSLAT.vdi~
   - File size :: ~8.00 GB~
   - Hard disk file type :: ~VDI (VirtualBox Disk Image)~
   - Storage on physical hard disk :: ~Dynamically allocated~
   Then click ~Create~
5. Enable port forwarding:
   - host port 3022 to VM port 22    # For ssh
   - host port 3080 to VM port 8000  # For server
6. Power on the VM. Boot from =~/Downloads/debian-9.0.0-amd64-netinst.iso=. Run
   the graphical installer.
   - hostname :: WebSLAT
   - domain :: webslat.org
   - root password :: webslat-admin
   - user name & password :: webslat-user
   Install standard system utilities and SSH server, but no desktop environment.
7. Set up a key for ssh logins:
   #+ATTR_LATEX: :options language=bash-local
   #+BEGIN_SRC bash :results output :eval ask
     # Create an ssh key, without a password, for 
     # communicating with the VM:
     if [[ ! -e ~/.ssh/vm ]]; then
	 ssh-keygen -f ~/.ssh/vm -N ''
     fi

     # If we've used the key with an earlier VM,
     # remove it:
     ssh-keygen -f "/home/mike/.ssh/known_hosts" \
		-R [127.0.0.1]:3022

     # Install the key in the VM:
     ssh-copy-id -o "StrictHostKeyChecking no" \
		 -i ~/.ssh/vm \
		 -p 3022 webslat-user@127.0.0.1 
   #+END_SRC

8. Run these commands on the VM as root. (I can't figure out how to do this from
   a script on the host machine).

   This will install the packages needed to build and run ~OpenSLAT~:
   #+ATTR_LATEX: :options language=bash-remote-root
   #+BEGIN_SRC bash
     apt-get update
     apt-get -y install  git \
	 make \
	 pkg-config \
	 libgsl-dev \
	 python3-dev \
	 python3-pip \
	 g++ \
	 libboost-dev \
	 libboost-log-dev \
	 libboost-test-dev \
	 swig3.0 \
	 openjdk-8-jre-headless \
	 curl \
	 zile
     curl \
	 http://www.antlr.org/download/antlr-4.7-complete.jar \
	 -o /usr/local/lib/antlr-4.7-complete.jar

     ln -s /usr/bin/swig3.0 /usr/bin/swig

     pip3 install antlr4-python3-runtime numpy typing
   #+END_SRC
9. Build the libraries:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo \
	   'if [[ -e SLAT ]]; then
		cd SLAT/linux
		git pull
	    else
		git clone \
		http://github.com/mikelygee/SLAT
		cd SLAT/linux
	    fi;
	    make' |
	   ssh -i ~/.ssh/vm -p 3022 \
	       webslat-user@127.0.0.1 |
	   tail -5
    #+END_SRC

10. Add the search paths to ~.bashrc~, if they aren't already there;
   #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output :eval ask
     echo \
	 "if ! grep PYTHONPATH .profile; then
	      echo export LD_LIBRARY_PATH=~/SLAT/linux/lib >> .profile
	      echo export PYTHONPATH=~/SLAT/linux/lib >> .profile
	  fi
     " | ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1 | tail -5
   #+END_SRC

11. Run the unit tests:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "cd SLAT/linux/bin
	     ./unit_tests
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -5 
    #+END_SRC

12. Run the C++ example2 binary:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval  ask
      echo "cd SLAT/parser/example2
	       ../../linux/bin/example2
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -5 
    #+END_SRC

13. Run the example2 Python script:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "cd SLAT/parser/example2
	       ./example2.py
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -5 
    #+END_SRC

14. Run the example2 SLAT script:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "cd SLAT/parser/example2
	       ../../linux/scripts/SlatInterpreter.py \
		    example2.slat
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -10 
    #+END_SRC

15. Run these commands on the VM as root. (I can't figure out how to do this from
   a script on the host machine).

   This will install the packages needed for ~WebSLAT~:
   #+ATTR_LATEX: :options language=bash-remote-root
   #+BEGIN_SRC bash
     apt-get -y install gfortran \
	     gsl-bin \
	     liblapack-dev \
	     libfreetype6-dev \
	     python3-tk \
	     links2
     pip3 install virtualenv
  #+END_SRC
16. Set up a virtual python environment
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "virtualenv webslat-env
	       source webslat-env/bin/activate
	       pip3 install numpy \
		   matplotlib \
		   scipy \
		   django \
		   django-graphos \
		   django-autocomplete-light \
                   django-extensions
               pip3 install django-registration
               pip3 install --upgrade django
	       deactivate
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -10
    #+END_SRC

17. Copy the ~webslat~ files to the VM:
   #+ATTR_LATEX: :options language=bash-local
    #+BEGIN_SRC bash :results output :eval ask
      echo "git clone \
                http://github.com/mikelygee/webslat
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -10
    #+END_SRC

18. Copy the ~graphos~ templates to the ~slat~ directory:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "cd ~/webslat-env/lib/python3.5/site-packages/graphos/templates
            cp -r graphos/ ~/webslat/webslat/slat/templates
      " | ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 2>&1 | tail -10
    #+END_SRC
19. Initialise the databse:
   As ~webslat-user~ on the VM, run:
  #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output
     source webslat-env/bin/activate
     cd webslat/webslat
     python3 manage.py migrate
   #+END_SRC

20. Run the test scripts:
    As ~webslat-user~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output
      python3 manage.py test
    #+END_SRC

21. Seed the databse:
    As ~webslat-user~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output
      python3 manage.py runscript seed_system
    #+END_SRC
    This will populate the database with several users and projects:
    | User ID    | Password      | Admin? | Projects                       |
    |------------+---------------+--------+--------------------------------|
    | slat-admin | swordfish     | X      |                                |
    |------------+---------------+--------+--------------------------------|
    | samspade   | maltesefalcon |        | Sam Spade's Demo Project       |
    |            |               |        | Sam Spade's Other Demo Project |
    |------------+---------------+--------+--------------------------------|
    | marlowe    | thebigsleep   |        | Phil Marlowe's First Project   |
    |            |               |        | Phil Marlowe's Second Project  |
    |------------+---------------+--------+--------------------------------|
    | holmes     | elementary    |        | Sherlock's Project             |
    |------------+---------------+--------+--------------------------------|
22. Test the ~django~ server:
    As ~webslat-user~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output
      python3 manage.py runserver 0:8000
    #+END_SRC

    In a separate session, run:
   #+ATTR_LATEX: :options language=bash-local
    #+BEGIN_SRC bash :results output
      links2 127.0.0.1:8000/slat
    #+END_SRC
    to confirm the server is working.

    Quit ~links2~ and kill the server.
23. User ~apache2~ to serve ~webslat~. First, as ~root~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote-root
   #+BEGIN_SRC bash
     apt-get -y install apache2 \
         libapache2-mod-wsgi-py3
   #+END_SRC
24. Make sure the ~apache2~ process can read the database file.
    1. Assign appropriate permissions:
       #+ATTR_LATEX: :options language=bash-remote
       #+BEGIN_SRC bash :results output :eval ask
	 echo "chmod 664 webslat/webslat/db.sqlite3
	       chmod 775 webslat/webslat
	       chmod --recursive 744 webslat/webslat/slat/static
	 " | ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1 2>&1 | tail -10 
       #+END_SRC

    2. Assign the files to the ~www-data~ group. As root on the VM, run:
       #+ATTR_LATEX: :options language=bash-remote-root
       #+BEGIN_SRC bash :results output
           chown :www-data /home/webslat-user/webslat/webslat/db.sqlite3
           chown :www-data /home/webslat-user/webslat/webslat
           chown --recursive :www-data /home/webslat-user/webslat/webslat/slat/static
       #+END_SRC
25. Edit ~webslat/webslat/webslat/settings.py~
    1. Set:
       #+BEGIN_SRC fundamental
	 ALLOWED_HOSTS = ['localhost', '127.0.0.1', '127.0.1.1']
       #+END_SRC
    2. Set:
       #+BEGIN_SRC fundamental
	 STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
       #+END_SRC
26. Create the static files:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output :eval ask
      echo "source webslat-env/bin/activate
            cd webslat/webslat
           ./manage.py collectstatic
      " | ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1 2>&1 | tail -10 
    #+END_SRC

27. As ~root~ on the VM, edit ~/etc/apache2/sites-available/000-default.conf~, by
    adding, inside the ~<VirtualHost...>~ tag:
    #+BEGIN_SRC fundamental
        Alias /static /home/webslat-user/webslat/webslat/static
        <Directory /home/webslat-user/webslat/webslat/static>
	  Require all granted
        </Directory>

        <Directory /home/webslat-user/webslat/webslat/webslat>
	  <Files wsgi.py>
	      Require all granted
	  </Files>
      </Directory>

      WSGIDaemonProcess webslat python-home=/home/webslat-user/webslat-env python-path=/home/webslat-user/webslat/webslat:/home/webslat-user/SLAT/linux/lib
      WSGIProcessGroup webslat
      WSGIScriptAlias / /home/webslat-user/webslat/webslat/webslat/wsgi.py
    #+END_SRC

    As ~root~, run:
    #+ATTR_LATEX: :options language=bash-remote-root
    #+BEGIN_SRC bash
    apache2ctl configtest
    #+END_SRC
    to check the configuration file.
28. Install ~libslat~ where ~apache2~ can find it. As ~root~, on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote-root
    #+BEGIN_SRC bash
    ln -s /home/webslat-user/SLAT/linux/lib/libslat.so /usr/local/lib
    ldconfig
    #+END_SRC
29. Restart the server. As ~root~, on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote-root
    #+BEGIN_SRC bash
    systemctl restart apache2
    #+END_SRC
    
   
To update OpenSLAT and WebSLAT without creating a new image:
1. Update OpenSLAT from git, and build:
   #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output :eval ask
     echo \
         'cd SLAT/linux
	  git pull
          make' |
	  ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 |
	  tail -5
    #+END_SRC


2. Update WebSLAT:
   #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output :eval ask
     echo \
	 'cd webslat
	  git pull
	  ' |
	  ssh -i ~/.ssh/vm -p 3022 \
	      webslat-user@127.0.0.1 |
	  tail -5
   #+END_SRC   


3. Run migrations:
   #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output :eval ask
     echo "source webslat-env/bin/activate
	   cd webslat/webslat
	  yes yes | ./manage.py migrate
     " | ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1 2>&1 | tail -10 
    #+END_SRC


4. Update the static files:
   #+ATTR_LATEX: :options language=bash-remote
   #+BEGIN_SRC bash :results output :eval ask
     echo "source webslat-env/bin/activate
	   cd webslat/webslat
	  yes yes | ./manage.py collectstatic
     " | ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1 2>&1 | tail -10 
    #+END_SRC


5. Restart the server. As ~root~, on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote-root
   #+BEGIN_SRC bash
   systemctl restart apache2
   #+END_SRC

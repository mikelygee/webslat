#+Title:     Create a VM for WebSLAT Deployment
#+AUTHOR:    Michael Gauland
#+EMAIL:     michael.gauland@canterbury.ac.nz
#+DATE:      {{{time(%Y-%m-%d %H:%M)}}}
#+OPTIONS:   H:6 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \usepackage{pdflscape}
#+LATEX_HEADER: \lstset{frame=shadowbox}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}\bfseries}
#+LATEX_HEADER: \newfontfamily\listingsfont[Scale=.7]{DejaVu Sans Mono}
#+LATEX_HEADER: \lstset{basicstyle=\listingsfont}
#+LATEX_HEADER: \lstset{basicstyle=\small}
#+LATEX_HEADER: \lstset{showspaces=true}
#+LATEX_HEADER: \lstset{columns=fixed}
#+LATEX_HEADER: \lstset{extendedchars=true}
#+LATEX_HEADER: \lstset{frame=shadowbox}
#+LATEX_HEADER: \definecolor{mygray}{gray}{0.8}
#+LATEX_HEADER: \lstset{rulesepcolor=\color{mygray}}
#+LATEX_HEADER: \lstdefinelanguage{bash-local}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{cyan}}
#+LATEX_HEADER: \lstdefinelanguage{bash-remote}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{yellow}}
#+LATEX_HEADER: \lstdefinelanguage{bash-remote-root}{basicstyle=\ttfamily\scriptsize,rulecolor=\color{green},rulesepcolor=\color{mygray},frameround=ffff,backgroundcolor=\color{orange}}
#+LATEX_HEADER: \lstdefinelanguage{fundamental}{basicstyle=\ttfamily\scriptsize,rulesepcolor=\color{cyan},frameround=tttt,backgroundcolor=\color{white},breaklines=true}
#+LATEX_HEADER: \def\lst@visiblespace{\lst@ttfamily{\char32}-}
#+PROPERTY: header-args :eval never

WebSLAT is a web-based interface to the [[http://github.com/mikelygee/SLAT][OpenSLAT]] project. The procedure below
will create a VirtualBox image including the OpenSLAT libraries and WebSLAT
served via Apache.

1. Run ~virtualbox~.
2. Click ~New~, then ~Expert Mode~ (if not already active).
3. Fill out the form:
   - Name :: WebSLAT
   - Type :: Linux
   - Version :: Debian (64-bit)
   - Memory Size :: 1024 MB
   - 'Create a virtual hard disk now'
   Then click ~Create~
4. Specify:
   - File Location :: ~/home/mag109/VirtualBox VMs/WebSLAT/WebSLAT.vdi~
   - File size :: ~8.00 GB~
   - Hard disk file type :: ~VDI (VirtualBox Disk Image)~
   - Storage on physical hard disk :: ~Dynamically allocated~
   Then click ~Create~
5. Enable port forwarding:
   - host port 3022 to VM port 22    # For ssh
   - host port 3080 to VM port 80    # For server
6. Power on the VM. Boot from =~/Downloads/debian-9.0.0-amd64-netinst.iso=. Run
   the graphical installer.
   - hostname :: WebSLAT
   - domain :: webslat.org
   - root password :: webslat-admin
   - user name & password :: webslat-user
   Install standard system utilities and SSH server, but no desktop environment.
7. Set up a key for ssh logins:
   #+ATTR_LATEX: :options language=bash-local
   #+BEGIN_SRC bash :results output :eval ask
     # Create an ssh key, without a password, for 
     # communicating with the VM:
     if [[ ! -e ~/.ssh/vm ]]; then
	 ssh-keygen -f ~/.ssh/vm -N ''

         # Add the identity as a default
         ssh-add ~/.ssh/vm
     fi

     # If we've used the key with an earlier VM,
     # remove it:
     ssh-keygen -f "$HOME/.ssh/known_hosts" \
		-R [127.0.0.1]:3022

     # Install the key in the VM:
     ssh-copy-id -o "StrictHostKeyChecking no" \
		 -i ~/.ssh/vm \
		 -p 3022 webslat-user@127.0.0.1 
   #+END_SRC

   #+RESULTS:
   : # Host [127.0.0.1]:3022 found: line 21
   : /home/mag109/.ssh/known_hosts updated.
   : Original contents retained as /home/mag109/.ssh/known_hosts.old
   : 
   : Number of key(s) added: 1
   : 
   : Now try logging into the machine, with:   "ssh -o 'StrictHostKeyChecking no' -p '3022' 'webslat-user@127.0.0.1'"
   : and check to make sure that only the key(s) you wanted were added.
   : 

8. Configure =ssh= to use the correct port and user name by default:
   #+ATTR_LATEX: :options language=bash-local
   #+BEGIN_SRC bash :results output :eval ask
     if [[ ! -e ~/.ssh/config ]]; then
         touch ~/.ssh/config
     fi
     if [ $(grep -c webslat-vm ~/.ssh/config) == 0 ]; then
         echo "Host webslat-vm
         User     webslat-user
         Port     3022
         Hostname 127.0.0.1" \
              >> ~/.ssh/config
     fi
   #+END_SRC

   #+RESULTS:

9. Test ~ssh~:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output 
   whoami
   #+END_SRC

   #+RESULTS:
   : webslat-user

10. Give ~webslat-user~ ~sudo~ privileges, without requiring a password. On the
    VM, as ~root~, run:

    You can connect via ~ssh~, from within ~emacs~:
    #+begin_src elisp :eval ask
      (make-term "webslat-single" 
		 "ssh" 
		 nil 
		 "-i" "/home/mike/.ssh/vm" 
		 "-p" "3022" 
		 "webslat-user@127.0.01")
    #+end_src

    #+RESULTS:
    : #<buffer *webslat-single*>

    Or run these commands at a shell prompt:
    #+ATTR_LATEX: :options language=bash-remote
    #+begin_src bash :eval never
    ssh -i ~/.ssh/vm -p 3022 webslat-user@127.0.0.1
    su
    #+end_src

    #+ATTR_LATEX: :options language=bash-remote-root
    #+BEGIN_SRC bash
    apt-get install sudo
    echo "webslat-user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    #+END_SRC

11. Test ~sudo~:
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :eval ask :results output
    date
    whoami
    sudo whoami
    #+END_SRC

    #+RESULTS:
    : Wed Mar  6 14:59:35 NZDT 2019
    : webslat-user
    : root

12. Run these commands:

    This will install the packages needed to build and run ~OpenSLAT~:
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :eval ask :results output
    sudo apt-get update
    sudo apt-get -y install  git \
         make \
         pkg-config \
         libgsl-dev \
         python3-dev \
         python3-pip \
         g++ \
         libboost-dev \
         libboost-log-dev \
         libboost-test-dev \
         swig3.0 \
         openjdk-8-jre-headless \
         curl \
         zile
     sudo curl \
         https://www.antlr.org/download/antlr-4.7.1-complete.jar \
         -o /usr/local/lib/antlr-4.7.1-complete.jar

     sudo ln -s /usr/bin/swig3.0 /usr/bin/swig

     sudo pip3 install antlr4-python3-runtime numpy typing
    #+END_SRC

    #+RESULTS:

13. Build the libraries:
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :results output :eval ask 
      if [[ -e SLAT ]]; then
          cd SLAT/linux
          git pull
      else
          git clone \
              http://github.com/openslat/SLAT
          cd SLAT/linux
      fi;
      make
     #+END_SRC

     #+RESULTS:

14. Add the search paths to ~.profile~, if they aren't already there;
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     if ! grep -q PYTHONPATH .profile; then
         echo export LD_LIBRARY_PATH=~/SLAT/linux/lib >> .profile
         echo export PYTHONPATH=~/SLAT/linux/lib >> .profile
     fi
   #+END_SRC

   #+RESULTS:

15. Run the unit tests:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash -i :results output :eval ask
     source .profile
     cd SLAT/linux/bin
     ./unit_tests 2>&1 
    #+END_SRC

    #+RESULTS:
    : Running 61 test cases...
    : 
    : *** No errors detected

16. Run the C++ example2 binary:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     cd SLAT/parser/example2
     ../../linux/bin/example2
    #+END_SRC

    #+RESULTS:

17. Run the example2 Python script:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     cd SLAT/parser/example2
     ./example2.py
    #+END_SRC

    #+RESULTS:

18. Run the example2 SLAT script:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     cd SLAT/parser/example2
     ../../linux/scripts/SlatInterpreter.py \
         example2.slat
    #+END_SRC

    #+RESULTS:

19. Run these commands:

   This will install the packages needed for ~WebSLAT~:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output
     sudo apt-get -y install gfortran \
          gsl-bin \
          liblapack-dev \
          libfreetype6-dev \
          python3-tk \
          w3m \
          rabbitmq-server \
          redis-server \
          supervisor
     sudo pip3 install virtualenv
  #+END_SRC

  #+RESULTS:

20. Set up a virtual python environment
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output
     virtualenv webslat-env
     source webslat-env/bin/activate
     pip3 install numpy \
	  matplotlib \
	  scipy \
	  django \
	  django-jchart \
	  django-autocomplete-light \
	  django-extensions \
	  seaborn \
	  pyquery \
          xlrd \
          pandas \
          celery \
          django-celery \
          redis \
          django-mathfilters \
          django-registration \
          anyjson
     deactivate
    #+END_SRC

    #+RESULTS:

21. Copy the ~webslat~ files to the VM:
   #+ATTR_LATEX: :options language=bash-local
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     git clone http://github.com/openslat/webslat
    #+END_SRC

    #+RESULTS:

23. Create a temporary directory. This is where ~WebSLAT~ will store temporary
    files, in particular for passing to the ~celery~ worker when importing
    ~ETABS~ data.
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+begin_src bash :results output :eval ask
    mkdir webslat/webslat/tmp
    chmod 775 webslat/webslat/tmp
    sudo chown :www-data webslat/webslat/tmp
    #+end_src

    #+RESULTS:

24. Install the config file to allow ~supervisord~ to start ~celery~
    automatically, then restart the ~supervisor~ service to ensure that ~celery~
    is running.
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :results output :eval ask
    echo "[program:webslat-celery]
    command=/home/webslat-user/webslat/start-celery.sh
    user=www-data" > webslat-celery.conf
    sudo mv webslat-celery.conf /etc/supervisor/conf.d
    sudo systemctl restart supervisor.service
    #+END_SRC    

    #+RESULTS:

25. Initialise the databse:
   As ~webslat-user~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     source webslat-env/bin/activate
     cd webslat/webslat
     python3 manage.py migrate
   #+END_SRC

   #+RESULTS:

26. Run the test scripts:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
      source .profile
      source webslat-env/bin/activate
      cd webslat/webslat
      ./runtests.sh 2>&1
    #+END_SRC

    #+RESULTS:

27. Seed the databse:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
      source .profile
      source webslat-env/bin/activate
      cd webslat/webslat
      python3 manage.py runscript seed_system
    #+END_SRC

    #+RESULTS:

    By default, ~WebSLAT~ is configured to run without requiring logins. If that
    has been changed, the script above will set up the following users and
    projects: 
    | User ID    | Password      | Admin? | Projects                       |
    |------------+---------------+--------+--------------------------------|
    | slat-admin | swordfish     | X      |                                |
    |------------+---------------+--------+--------------------------------|
    | samspade   | maltesefalcon |        | Sam Spade's Demo Project       |
    |            |               |        | Sam Spade's Other Demo Project |
    |------------+---------------+--------+--------------------------------|
    | miles      | samspartner   |        |                                |
    |------------+---------------+--------+--------------------------------|
    | marlowe    | thebigsleep   |        | Phil Marlowe's First Project   |
    |            |               |        | Phil Marlowe's Second Project  |
    |------------+---------------+--------+--------------------------------|
    | holmes     | elementary    |        | Sherlock's Project             |
    |------------+---------------+--------+--------------------------------|
28. Test the ~django~ server:
    As ~webslat-user~ on the VM, run:
   #+ATTR_LATEX: :options language=bash-remote
    #+BEGIN_SRC bash :results output
      # Can't run this from this file, because =runserver= won't return.
      source webslat-env/bin/activate
      cd webslat/webslat
      python3 manage.py runserver 0:8000
    #+END_SRC

    In a separate session, run:
   #+ATTR_LATEX: :options language=bash-local
    #+BEGIN_SRC bash :results output
      w3m http://127.0.0.1:8000
    #+END_SRC
    to confirm the server is working.

    Quit ~w3m~ and kill the server.
29. User ~apache2~ to serve ~webslat~. First, run:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output
     sudo apt-get -y install apache2 \
          libapache2-mod-wsgi-py3
   #+END_SRC

   #+RESULTS:

30. Make sure the ~apache2~ process can read the database file.
    1. Assign appropriate permissions:
       #+ATTR_LATEX: :options language=bash-remote
       #+HEADER: :dir /ssh:webslat-vm:
       #+BEGIN_SRC bash :results output :eval ask
         chmod 664 webslat/webslat/db.sqlite3
         chmod 775 webslat/webslat
         chmod --recursive 744 webslat/webslat/slat/static
       #+END_SRC

       #+RESULTS:

    2. Assign the files to the ~www-data~ group. Run:
       #+ATTR_LATEX: :options language=bash-remote
       #+HEADER: :dir /ssh:webslat-vm:
       #+BEGIN_SRC bash :results output :eval ask
         sudo chown :www-data /home/webslat-user/webslat/webslat/db.sqlite3
         sudo chown :www-data /home/webslat-user/webslat/webslat
         sudo chown --recursive :www-data /home/webslat-user/webslat/webslat/slat/static
       #+END_SRC

       #+RESULTS:

31. Edit ~webslat/webslat/webslat/settings.py~
    1. Set =DEBUG= to =False=:
       #+HEADER: :dir /ssh:webslat-vm:
       #+BEGIN_SRC bash :results output :eval ask
         sed -ie "s/DEBUG *=.*$/DEBUG = False/" \
             webslat/webslat/webslat/settings.py
       #+END_SRC

       #+RESULTS:
       
    2. Set =ALLOWED_HOSTS=:
       #+HEADER: :dir /ssh:webslat-vm:
       #+BEGIN_SRC bash :results output :eval ask
         sed -ie "s/ALLOWED_HOSTS.*$/ALLOWED_HOSTS=['localhost', '127.0.0.1', '127.0.1.1']/" \
             webslat/webslat/webslat/settings.py
       #+END_SRC

       #+RESULTS:

    3. Set =STATIC_ROOT=:
       #+HEADER: :dir /ssh:webslat-vm:
       #+BEGIN_SRC bash :results output :eval ask
         sed -ie "s/STATIC_ROOT.*/STATIC_ROOT = os.path.join(BASE_DIR, 'static\/')/" \
             webslat/webslat/webslat/settings.py
       #+END_SRC

       #+RESULTS:

32. Create the static files:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     source webslat-env/bin/activate
     cd webslat/webslat
     ./manage.py collectstatic
    #+END_SRC

    #+RESULTS:

33. As ~root~ on the VM, edit ~/etc/apache2/sites-available/000-default.conf~, by
    adding, inside the ~<VirtualHost...>~ tag:
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :eval ask
      if [ $(grep webslat-user -c /etc/apache2/sites-available/000-default.conf) == 0 ]
      then 
          sudo sed -ie 's|</VirtualHost>|\
              Alias /static /home/webslat-user/webslat/webslat/static \
                <Directory /home/webslat-user/webslat/webslat/static>\
                  Require all granted\
              </Directory>\
      \
              <Directory /home/webslat-user/webslat/webslat/webslat>\
                <Files wsgi.py>\
                    Require all granted\
                </Files>\
              </Directory>\
      \
              WSGIDaemonProcess webslat python-home=/home/webslat-user/webslat-env python-path=/home/webslat-user/webslat/webslat:/home/webslat-user/SLAT/linux/lib\
              WSGIProcessGroup webslat\
              WSGIScriptAlias / /home/webslat-user/webslat/webslat/webslat/wsgi.py\
      </VirtualHost>|' /etc/apache2/sites-available/000-default.conf
      fi
    #+END_SRC

    #+RESULTS:

    Test the configuration:
    #+ATTR_LATEX: :options language=bash-remote
    #+HEADER: :dir /ssh:webslat-vm:
    #+BEGIN_SRC bash :eval ask :results output
      date
      sudo apache2ctl configtest 2>&1
    #+END_SRC

    #+RESULTS:
    : Wed Mar  6 15:32:00 NZDT 2019
    : Syntax OK

34. Install ~libslat~ where ~apache2~ can find it. Run:
   #+ATTR_LATEX: :options language=bash-remote-root
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output
     sudo ln -s /home/webslat-user/SLAT/linux/lib/libslat.so /usr/local/lib
     sudo ldconfig
    #+END_SRC

    #+RESULTS:

35. Restart the server:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output
     sudo systemctl restart apache2
    #+END_SRC

    #+RESULTS:

36. Connect from the browser:
   #+ATTR_LATEX: :options language=bash-local
   #+BEGIN_SRC bash :eval ask :results output
     firefox http://localhost:3080
    #+END_SRC

    #+RESULTS:
        
To update OpenSLAT and WebSLAT without creating a new image:
1. Update OpenSLAT from git, and build:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     cd SLAT/linux
     git pull
     make
    #+END_SRC

    #+RESULTS:
    : Already up-to-date.
    : make: Nothing to be done for 'all'.

2. Update WebSLAT:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     cd webslat
     git pull
   #+END_SRC   

   #+RESULTS:
   : Already up-to-date.

3. Run migrations:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     source webslat-env/bin/activate
     cd webslat/webslat
     yes yes | ./manage.py migrate
    #+END_SRC

4. Update the static files:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :results output :eval ask
     source .profile
     source webslat-env/bin/activate
     cd webslat/webslat
     yes yes | ./manage.py collectstatic
    #+END_SRC

    #+RESULTS:

5. Restart the server:
   #+ATTR_LATEX: :options language=bash-remote
   #+HEADER: :dir /ssh:webslat-vm:
   #+BEGIN_SRC bash :eval ask :results output 
     sudo systemctl restart apache2
     sudo systemctl restart supervisor.service
   #+END_SRC

   #+RESULTS:


